# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml
startCommand:
  type: stdio
  configSchema:
    type: object
    required:
      - UNITY_MCP_CLIENT_TRANSPORT
    properties:
      UNITY_MCP_CLIENT_TRANSPORT:
        type: string
        description: "http or stdio transport options"
        default: "stdio"
      UNITY_MCP_PORT:
        type: integer
        description: "The port for the Unity plugin"
        default: 8080
      UNITY_MCP_PLUGIN_TIMEOUT:
        type: integer
        description: "The timeout for the Unity plugin"
        default: 30000
  commandFunction: |
    (config) => {
      const os = require('os');
      const path = require('path');
      const fs = require('fs');
      const https = require('https');
      const { execSync } = require('child_process');

      const platform = os.platform();
      const arch = os.arch();

      let runtime;
      if (platform === 'win32') {
        runtime = arch === 'x64' ? 'win-x64' : arch === 'ia32' ? 'win-x86' : 'win-arm64';
      } else if (platform === 'linux') {
        runtime = arch === 'x64' ? 'linux-x64' : 'linux-arm64';
      } else if (platform === 'darwin') {
        runtime = arch === 'x64' ? 'osx-x64' : 'osx-arm64';
      } else {
        throw new Error(`Unsupported platform: ${platform}`);
      }

      const version = '0.17.1';
      const fileName = `unity-mcp-server-${runtime}.zip`;
      const downloadUrl = `https://github.com/IvanMurzak/Unity-MCP/releases/download/v${version}/${fileName}`;
      const cacheDir = path.join(os.homedir(), '.unity-mcp-cache');
      const zipPath = path.join(cacheDir, fileName);
      const extractDir = path.join(cacheDir, runtime);
      const executableName = platform === 'win32' ? 'unity-mcp-server.exe' : 'unity-mcp-server';
      const executablePath = path.join(extractDir, executableName);

      if (!fs.existsSync(executablePath)) {
        if (!fs.existsSync(cacheDir)) {
          fs.mkdirSync(cacheDir, { recursive: true });
        }

        console.log(`Downloading Unity MCP Server for ${runtime}...`);
        const zipData = execSync(`curl -L -o "${zipPath}" "${downloadUrl}"`, { stdio: 'inherit' });

        console.log(`Extracting ${fileName}...`);
        if (platform === 'win32') {
          execSync(`powershell -command "Expand-Archive -Path '${zipPath}' -DestinationPath '${cacheDir}' -Force"`, { stdio: 'inherit' });
        } else {
          execSync(`unzip -o "${zipPath}" -d "${cacheDir}"`, { stdio: 'inherit' });
        }

        if (platform !== 'win32') {
          execSync(`chmod +x "${executablePath}"`, { stdio: 'inherit' });
        }
      }

      return {
        command: executablePath,
        args: [
          '--client-transport', config.UNITY_MCP_CLIENT_TRANSPORT,
          '--port', config.UNITY_MCP_PORT.toString(),
          '--plugin-timeout', config.UNITY_MCP_PLUGIN_TIMEOUT.toString()
        ],
        env: {
          UNITY_MCP_CLIENT_TRANSPORT: config.UNITY_MCP_CLIENT_TRANSPORT,
          UNITY_MCP_PORT: config.UNITY_MCP_PORT.toString(),
          UNITY_MCP_PLUGIN_TIMEOUT: config.UNITY_MCP_PLUGIN_TIMEOUT.toString()
        }
      };
    }
  exampleConfig:
    UNITY_MCP_CLIENT_TRANSPORT: "stdio"
    UNITY_MCP_PORT: 8080
    UNITY_MCP_PLUGIN_TIMEOUT: 30000