name: release

on:
  push:
    branches:
      - main

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      prev_tag: ${{ steps.prev_tag.outputs.prev_tag }}
      tag_exists: ${{ steps.tag_exists.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Get version from package.json
        id: get_version
        run: |
          version=$(grep '"version"' Unity-MCP-Plugin/Assets/root/package.json | head -1 | sed -E 's/.*"([0-9.]+)".*/\1/')
          echo "version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Fetch all history and tags
        run: git fetch --unshallow --tags || git fetch --all --tags

      - name: Find previous version tag
        id: prev_tag
        run: |
          version=${{ steps.get_version.outputs.version }}
          prev_tag=$(git tag --list '[0-9]*.[0-9]*.[0-9]*' | grep -v "^$version$" | sort -V | tail -n 1)
          echo "Previous version: $prev_tag"
          echo "prev_tag=$prev_tag" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_exists
        run: |
          version=${{ steps.get_version.outputs.version }}
          tag_name="$version"
          if git ls-remote --tags origin | grep -q "refs/tags/$tag_name"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-and-zip-mcp-server:
    runs-on: macos-latest
    needs: check-version-tag
    if: needs.check-version-tag.outputs.tag_exists == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Make build script executable
        run: chmod +x ./Unity-MCP-Server/build-all.sh

      - name: Build executables for all platforms
        shell: bash {0}
        run: cd Unity-MCP-Server && ./build-all.sh Release

      - name: Upload build zips as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-zips
          path: ./Unity-MCP-Server/publish/*.zip

  # --- UNITY TESTS ------
  # ----------------------

  # --- EDIT MODE ---

  test-unity-2022-3-61f1-editmode:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  test-unity-2023-3-20f1-editmode:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  test-unity-6000-2-3f1-editmode:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  # --- PLAY MODE ---

  test-unity-2022-3-61f1-playmode:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  test-unity-2023-3-20f1-playmode:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  test-unity-6000-2-3f1-playmode:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  # --- STANDALONE ---

  test-unity-2022-3-61f1-standalone:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  test-unity-2023-3-20f1-standalone:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  test-unity-6000-2-3f1-standalone:
    runs-on: ubuntu-latest
    needs: build-and-zip-mcp-server
    steps:
      - name: Skip test
        run: echo "Skipping Unity tests - job completes successfully"

  # -------------------

  release-unity-plugin:
    runs-on: ubuntu-latest
    needs: [
      check-version-tag,
      build-and-zip-mcp-server,
      test-unity-2022-3-61f1-editmode,
      test-unity-2022-3-61f1-playmode,
      test-unity-2022-3-61f1-standalone,
      test-unity-2023-3-20f1-editmode,
      test-unity-2023-3-20f1-playmode,
      test-unity-2023-3-20f1-standalone,
      test-unity-6000-2-3f1-editmode,
      test-unity-6000-2-3f1-playmode,
      test-unity-6000-2-3f1-standalone
    ]
    if: needs.check-version-tag.outputs.tag_exists == 'false'
    outputs:
      version: ${{ needs.check-version-tag.outputs.version }}
      success: ${{ steps.rel_desc.outputs.success }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate release description
        id: rel_desc
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          version=${{ needs.check-version-tag.outputs.version }}
          prev_tag=${{ needs.check-version-tag.outputs.prev_tag }}
          repo_url="https://github.com/${GITHUB_REPOSITORY}"
          today=$(date +'%B %e, %Y')

          echo "repo_url: $repo_url"
          echo "today: $today"

          echo "# Unity-MCP Version $version" > release.md
          echo "**Released:** *$today*" >> release.md

          echo "" >> release.md
          echo "---" >> release.md
          echo "" >> release.md

          if [ -n "$prev_tag" ]; then
            echo "## Comparison" >> release.md
            echo "See every change: [Compare $prev_tag...$version]($repo_url/compare/$prev_tag...$version)" >> release.md

            echo "" >> release.md
            echo "---" >> release.md
            echo "" >> release.md
          fi

          echo "## Commit Summary (Newest → Oldest)" >> release.md
          for sha in $(git log --pretty=format:'%H' $prev_tag..HEAD); do
            username=$(gh api repos/${GITHUB_REPOSITORY}/commits/$sha --jq '.author.login // .commit.author.name')
            message=$(git log -1 --pretty=format:'%s' $sha)
            short_sha=$(git log -1 --pretty=format:'%h' $sha)
            echo "- [\`$short_sha\`]($repo_url/commit/$sha) — $message by @$username" >> release.md
          done
          printf "release_body<<ENDOFRELEASEBODY\n%s\nENDOFRELEASEBODY\n" "$(cat release.md)" >> $GITHUB_ENV
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Create Tag and Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version-tag.outputs.version }}
          name: ${{ needs.check-version-tag.outputs.version }}
          body: ${{ env.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  export-and-publish-unity-package:
    runs-on: ubuntu-latest
    needs: release-unity-plugin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: ./AssetStore-Installer/Library
          key: Library-2022.3.61f1-export-ubuntu-latest

      - name: Export Unity Package
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ./AssetStore-Installer
          unityVersion: 2022.3.61f1
          buildName: AI-Game-Dev-Installer
          buildsPath: build
          buildMethod: PackageExporter.ExportPackage

      - name: Upload Unity Package to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./AssetStore-Installer/build/AI-Game-Dev-Installer.unitypackage
          tag_name: ${{ needs.release-unity-plugin.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-mcp-server:
    runs-on: macos-latest
    needs: release-unity-plugin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build zips artifact
        uses: actions/download-artifact@v4
        with:
          name: mcp-server-zips
          path: ./Unity-MCP-Server/publish

      - name: Upload release zip archives
        uses: softprops/action-gh-release@v2
        with:
          files: ./Unity-MCP-Server/publish/*.zip
          tag_name: ${{ needs.release-unity-plugin.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Cleanup job to remove build artifacts after publishing
  cleanup-mcp-server-artifacts:
    runs-on: ubuntu-latest
    needs: publish-mcp-server
    if: always()
    steps:
      - name: Delete workflow artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: mcp-server-zips